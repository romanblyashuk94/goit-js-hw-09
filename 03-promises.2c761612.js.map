{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,SACjCC,EAAqBF,SAASC,cAAc,kBAC5CE,EAAeH,SAASC,cAAc,iBACtCG,EAAsBJ,SAASC,cAAc,mBA0BnD,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,GACFI,EAAQ,CAAEN,SAAAA,EAAUC,MAAAA,IAGtBM,EAAO,CAAEP,SAAAA,EAAUC,MAAAA,MAClBA,MAlCPR,EAAQgB,iBAAiB,UAEzB,SAAkCC,GAChCA,EAAEC,iBACF,IAAIV,EAAQW,OAAOhB,EAAmBiB,OAChCC,EAAYF,OAAOf,EAAagB,OAChCE,EAAiBH,OAAOd,EAAoBe,QAKpD,SAA8BZ,EAAOa,EAAWC,GAC9C,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAgBC,IACnCjB,EAAciB,EAAGf,GACdgB,MAAK,SAAAC,OAAGlB,EAAQkB,EAARlB,SAAUmB,EAAKD,EAALjB,aACjBmB,EAAA7B,GAAS8B,OAAOC,QAAS,qBAAmCC,OAAfvB,EAAS,QAAYuB,OAANJ,EAAM,UAEnEK,OAAM,SAAAN,OAAGlB,EAAQkB,EAARlB,SAAUmB,EAAKD,EAALjB,aAClBmB,EAAA7B,GAAS8B,OAAOI,QAAS,oBAAkCF,OAAfvB,EAAS,QAAYuB,OAANJ,EAAM,UAErElB,GAASa,EAZXY,CAAqBzB,EAAOa,EAAWC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst fromRef = document.querySelector(\".form\");\nconst firstDelayInputRef = document.querySelector('[name=\"delay\"]');\nconst stepInputRef = document.querySelector('[name=\"step\"]');\nconst amountDelayInputRef = document.querySelector('[name=\"amount\"]');\n\nfromRef.addEventListener(\"submit\", onCreatePromisesBtnClick);\n\nfunction onCreatePromisesBtnClick(e) {\n  e.preventDefault();\n  let delay = Number(firstDelayInputRef.value);\n  const delayStep = Number(stepInputRef.value);\n  const promisesAmount = Number(amountDelayInputRef.value);\n\n  runPromisesGenerator(delay, delayStep, promisesAmount);\n}\n\nfunction runPromisesGenerator(delay, delayStep, promisesAmount) {\n  for (let i = 1; i <= promisesAmount; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) =>\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`)\n      );\n    delay += delayStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$fromRef","document","querySelector","$ce04d3a99e08e73b$var$firstDelayInputRef","$ce04d3a99e08e73b$var$stepInputRef","$ce04d3a99e08e73b$var$amountDelayInputRef","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","Number","value","delayStep","promisesAmount","i","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$runPromisesGenerator"],"version":3,"file":"03-promises.2c761612.js.map"}